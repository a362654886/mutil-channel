[{"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\index.tsx":"1","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\index.ts":"2","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\index.tsx":"3","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\configureStore.ts":"4","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\style.ts":"5","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\common\\const.ts":"6","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\hooks\\useChannels.ts":"7","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\slice\\channelsSlice\\selectors.ts":"8","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\components\\NewChannel\\NewChannel.tsx":"9","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\components\\NewMessage\\NewMessage.tsx":"10","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\reducers.ts":"11","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\slice\\channelsSlice\\index.ts":"12","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\actions.ts":"13","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\slice\\channelsSlice\\saga.ts":"14","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\service\\messageAPI.ts":"15","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\service\\channelAPI.ts":"16","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\tools\\http.ts":"17"},{"size":524,"mtime":1667477846353,"results":"18","hashOfConfig":"19"},{"size":114,"mtime":1667477846355,"results":"20","hashOfConfig":"19"},{"size":4829,"mtime":1667524448148,"results":"21","hashOfConfig":"19"},{"size":984,"mtime":1667477846355,"results":"22","hashOfConfig":"19"},{"size":442,"mtime":1667477846354,"results":"23","hashOfConfig":"19"},{"size":78,"mtime":1667477846352,"results":"24","hashOfConfig":"19"},{"size":815,"mtime":1667477846352,"results":"25","hashOfConfig":"19"},{"size":362,"mtime":1667477846354,"results":"26","hashOfConfig":"19"},{"size":1164,"mtime":1667523650710,"results":"27","hashOfConfig":"19"},{"size":1085,"mtime":1667524757392,"results":"28","hashOfConfig":"19"},{"size":799,"mtime":1667477846355,"results":"29","hashOfConfig":"19"},{"size":4452,"mtime":1667477846354,"results":"30","hashOfConfig":"19"},{"size":234,"mtime":1667477846355,"results":"31","hashOfConfig":"19"},{"size":2731,"mtime":1667477846354,"results":"32","hashOfConfig":"19"},{"size":1424,"mtime":1667477846355,"results":"33","hashOfConfig":"19"},{"size":1224,"mtime":1667477846355,"results":"34","hashOfConfig":"19"},{"size":542,"mtime":1667477846356,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1cgon7s",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\index.tsx",[],[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\index.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\index.tsx",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\configureStore.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\style.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\common\\const.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\hooks\\useChannels.ts",["75"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useChannelsSlice } from \"../pages/HomePage/slice/channelsSlice\";\r\nimport { selectChannels } from \"../pages/HomePage/slice/channelsSlice/selectors\";\r\nimport { useEffect } from \"react\";\r\nimport { ChannelsState } from \"types/channelType\";\r\n\r\nexport const useChannels = () => {\r\n  const { actions: channelsActions } = useChannelsSlice();\r\n  const dispatch = useDispatch();\r\n  const channels: ChannelsState = useSelector(selectChannels);\r\n\r\n  useEffect(() => {\r\n    if (channels.totalChannels === 0) {\r\n      dispatch(\r\n        channelsActions.getChannels({\r\n          sortType: \"name\",\r\n          sortAscend: true,\r\n          page: 1,\r\n        })\r\n      );\r\n    }\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return channels;\r\n};\r\n","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\slice\\channelsSlice\\selectors.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\components\\NewChannel\\NewChannel.tsx",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\components\\NewMessage\\NewMessage.tsx",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\reducers.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\slice\\channelsSlice\\index.ts",["76"],"import {\r\n  CaseReducerActions,\r\n  createSlice,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport { useInjectReducer, useInjectSaga } from \"redux-injectors\";\r\nimport {\r\n  Channel,\r\n  ChannelsFilterPara,\r\n  ChannelsState,\r\n} from \"../../../../types/channelType\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { channelsSaga } from \"./saga\";\r\nimport { Message } from \"../../../../types/messageType\";\r\n\r\nexport const initialState: ChannelsState = {\r\n  channels: [{ _id: \"\", name: \"\", messages: [] }],\r\n  totalChannels: 0,\r\n  filterPara: { sortType: \"name\", sortAscend: true, page: 1 },\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"channels\",\r\n  initialState,\r\n  reducers: {\r\n    /*\r\n    channel method\r\n    */\r\n    updateChannels(\r\n      state,\r\n      action: PayloadAction<{\r\n        channels: Channel[];\r\n        totalChannels: number;\r\n      }>\r\n    ) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      newState.channels = action.payload.channels;\r\n      newState.totalChannels = action.payload.totalChannels;\r\n      return newState;\r\n    },\r\n    getChannels(state, action: PayloadAction<ChannelsFilterPara>) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      newState.filterPara = action.payload;\r\n      return newState;\r\n    },\r\n    addChannel(state, action: PayloadAction<Channel>) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      //newState.channels.push(action.payload);\r\n      return newState;\r\n    },\r\n    deleteChannel(state, action: PayloadAction<string>) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      const index = newState.channels.findIndex(\r\n        (channel) => channel._id === action.payload\r\n      );\r\n      newState.channels.splice(index, 1);\r\n      return newState;\r\n    },\r\n    /*\r\n     message method \r\n    */\r\n    addMessage(\r\n      state,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        message: Message;\r\n      }>\r\n    ) {\r\n      // get channel id\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      const channelIndex = newState.channels.findIndex(\r\n        (channel) => channel._id === action.payload.channelId\r\n      );\r\n      // push message to channel's messages\r\n      if (\r\n        newState.channels[channelIndex] &&\r\n        newState.channels[channelIndex].messages\r\n      ) {\r\n        (newState.channels[channelIndex].messages as Message[]).push(\r\n          action.payload.message\r\n        );\r\n      }\r\n      return newState;\r\n    },\r\n    // add message\r\n    deleteMessage(\r\n      state,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        messageId: string;\r\n      }>\r\n    ) {\r\n      // get channel id\r\n      const newState = cloneDeep(state);\r\n      const channelIndex = newState.channels.findIndex(\r\n        (channel: Channel) => channel._id === action.payload.channelId\r\n      );\r\n      // delete channel's message\r\n      if (\r\n        newState.channels[channelIndex] &&\r\n        newState.channels[channelIndex].messages\r\n      ) {\r\n        const messages = newState.channels[channelIndex].messages as Message[];\r\n        const messageIndex = messages.findIndex(\r\n          (message) => (message._id as string) === action.payload.messageId\r\n        );\r\n        (newState.channels[channelIndex].messages as Message[]).splice(\r\n          messageIndex,\r\n          1\r\n        );\r\n      }\r\n      return newState;\r\n    },\r\n  },\r\n});\r\nexport const { actions, reducer, name: channelsSlice } = slice;\r\n\r\nexport const useChannelsSlice = (): {\r\n  actions: CaseReducerActions<{\r\n    updateChannels(\r\n      state: ChannelsState,\r\n      action: PayloadAction<{\r\n        channels: Channel[];\r\n        totalChannels: number;\r\n      }>\r\n    ): void;\r\n    getChannels(\r\n      state: ChannelsState,\r\n      action: PayloadAction<ChannelsFilterPara>\r\n    ): void;\r\n    addChannel(state: ChannelsState, action: PayloadAction<Channel>): void;\r\n    deleteChannel(state: ChannelsState, action: PayloadAction<string>): void;\r\n    addMessage(\r\n      state: ChannelsState,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        message: Message;\r\n      }>\r\n    ): void;\r\n    deleteMessage(\r\n      state: ChannelsState,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        messageId: string;\r\n      }>\r\n    ): void;\r\n  }>;\r\n} => {\r\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\r\n  useInjectSaga({ key: slice.name, saga: channelsSaga });\r\n  return { actions: slice.actions };\r\n};\r\n","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\store\\actions.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\pages\\HomePage\\slice\\channelsSlice\\saga.ts",["77","78","79","80","81"],"import { call, put, select, takeLatest } from \"redux-saga/effects\";\r\nimport { PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { actions as channelsAction } from \".\";\r\nimport { Channel, ChannelsFilterPara } from \"../../../../types/channelType\";\r\nimport { GrubResponse } from \"../../../../types/GrupResponse\";\r\nimport { PAGE_SIZE } from \"../../../../common/const\";\r\nimport { ChannelAPI } from \"../../../../service/channelAPI\";\r\nimport { RootState } from \"../../../../types/RootState\";\r\nimport { MessageAPI } from \"../../../../service/messageAPI\";\r\nimport { Message } from \"../../../../types/messageType\";\r\n\r\nexport function* getChannelsAsync(action: PayloadAction<ChannelsFilterPara>) {\r\n  try {\r\n    const updatedChannels: GrubResponse<{\r\n      channels: Channel[];\r\n      count: number;\r\n    } | null> = yield call(() =>\r\n      ChannelAPI.getChannelByPage(\r\n        action.payload.sortType,\r\n        action.payload.sortAscend,\r\n        action.payload.page,\r\n        PAGE_SIZE\r\n      )\r\n    );\r\n    if (updatedChannels.data) {\r\n      const { channels, count } = updatedChannels.data;\r\n      yield put(\r\n        channelsAction.updateChannels({\r\n          channels: channels,\r\n          totalChannels: count,\r\n        })\r\n      );\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* addChannelAsync(action: PayloadAction<Channel>) {\r\n  try {\r\n    yield call(() => ChannelAPI.createClient(action.payload));\r\n    const state: RootState = yield select();\r\n    if (state.channels) {\r\n      yield put(channelsAction.getChannels(state.channels.filterPara));\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* addMessageAsync(\r\n  action: PayloadAction<{\r\n    channelId: string;\r\n    message: Message;\r\n  }>\r\n) {\r\n  try {\r\n    yield call(() => MessageAPI.createMessage(action.payload.message));\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* deleteMessageAsync(\r\n  action: PayloadAction<{\r\n    channelId: string;\r\n    messageId: string;\r\n  }>\r\n) {\r\n  try {\r\n    yield call(() => MessageAPI.deleteMessage(action.payload.messageId));\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* channelsSaga() {\r\n  yield takeLatest(channelsAction.getChannels.type, getChannelsAsync);\r\n  yield takeLatest(channelsAction.addChannel.type, addChannelAsync);\r\n  yield takeLatest(channelsAction.addMessage.type, addMessageAsync);\r\n  yield takeLatest(channelsAction.deleteMessage.type, deleteMessageAsync);\r\n}\r\n","D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\service\\messageAPI.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\service\\channelAPI.ts",[],"D:\\Github\\mutil-channel\\mutil-channel\\client-side\\src\\tools\\http.ts",["82"],"import { notification } from \"antd\";\r\nimport axios from \"axios\";\r\nimport qs from \"qs\";\r\n\r\nconst http = axios.create({\r\n  paramsSerializer: {\r\n    encode: (params) => {\r\n      const { __notification, ...rest } = params;\r\n      return qs.stringify(rest);\r\n    },\r\n  },\r\n});\r\n\r\nhttp.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    notification.error({\r\n      message: error.message,\r\n      description: error.message,\r\n    });\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default http;\r\n",{"ruleId":"83","severity":1,"message":"84","line":7,"column":28,"nodeType":"85","messageId":"86","endLine":7,"endColumn":33},{"ruleId":"87","severity":1,"message":"88","line":46,"column":23,"nodeType":"89","messageId":"90","endLine":46,"endColumn":53},{"ruleId":"83","severity":1,"message":"84","line":12,"column":8,"nodeType":"91","messageId":"86","endLine":12,"endColumn":77},{"ruleId":"83","severity":1,"message":"84","line":41,"column":8,"nodeType":"91","messageId":"86","endLine":41,"endColumn":65},{"ruleId":"83","severity":1,"message":"84","line":55,"column":8,"nodeType":"91","messageId":"86","endLine":60,"endColumn":2},{"ruleId":"83","severity":1,"message":"84","line":70,"column":8,"nodeType":"91","messageId":"86","endLine":75,"endColumn":2},{"ruleId":"83","severity":1,"message":"84","line":85,"column":8,"nodeType":"91","messageId":"86","endLine":85,"endColumn":32},{"ruleId":"87","severity":1,"message":"92","line":8,"column":15,"nodeType":"89","messageId":"90","endLine":8,"endColumn":29},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'action' is defined but never used.","Identifier","unusedVar","FunctionDeclaration","'__notification' is assigned a value but never used."]