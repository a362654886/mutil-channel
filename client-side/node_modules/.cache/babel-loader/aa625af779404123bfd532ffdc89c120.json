{"ast":null,"code":"import { HOST } from \"../common/const\";\nimport http from \"../tools/http\";\nexport const ChannelAPI = {\n  createClient: channel => http.post(`${HOST}channelInsert`, {\n    channelBody: channel\n  }),\n  getChannelByPage: (sortType, sortAscend, page, pageSize) => http.get(`${HOST}channelsGetByPage?sortType=${sortType}&sortAscend=${sortAscend}&page=${page}&pageSize=${pageSize}`),\n  getChannelBySearch: (name, sortType, sortAscend) => http.get(`${HOST}channelsGetBySearch?name=${name}&sortType=${sortType}&sortAscend=${sortAscend}`),\n  updateChannel: channel => http.put(`${HOST}channelUpdate`, {\n    channelBody: channel\n  }),\n  deleteChannel: channelId => http.delete(`${HOST}channelDelete?channelId=${channelId}`)\n};","map":{"version":3,"names":["HOST","http","ChannelAPI","createClient","channel","post","channelBody","getChannelByPage","sortType","sortAscend","page","pageSize","get","getChannelBySearch","name","updateChannel","put","deleteChannel","channelId","delete"],"sources":["D:/Github/multi-channel-project/multi-channel-frontend/src/service/channelAPI.ts"],"sourcesContent":["import { HOST } from \"../common/const\";\r\nimport http from \"../tools/http\";\r\nimport { Channel } from \"../types/channelType\";\r\nimport { GrubResponsePromise } from \"../types/GrupResponse\";\r\n\r\nexport const ChannelAPI = {\r\n  createClient: (channel: Channel): GrubResponsePromise<number | null> =>\r\n    http.post(`${HOST}channelInsert`, { channelBody: channel }),\r\n  getChannelByPage: (\r\n    sortType: string,\r\n    sortAscend: boolean,\r\n    page: number,\r\n    pageSize: number\r\n  ): Promise<{\r\n    channels: Channel[];\r\n    count: number;\r\n  } | null> =>\r\n    http.get(\r\n      `${HOST}channelsGetByPage?sortType=${sortType}&sortAscend=${sortAscend}&page=${page}&pageSize=${pageSize}`\r\n    ),\r\n  getChannelBySearch: (\r\n    name: string,\r\n    sortType: string,\r\n    sortAscend: boolean\r\n  ): GrubResponsePromise<Channel[]> =>\r\n    http.get(\r\n      `${HOST}channelsGetBySearch?name=${name}&sortType=${sortType}&sortAscend=${sortAscend}`\r\n    ),\r\n  updateChannel: (channel: Channel): GrubResponsePromise<number | null> =>\r\n    http.put(`${HOST}channelUpdate`, { channelBody: channel }),\r\n  deleteChannel: (channelId: string): GrubResponsePromise<number | null> =>\r\n    http.delete(`${HOST}channelDelete?channelId=${channelId}`),\r\n};\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,IAAI,MAAM,eAAe;AAIhC,OAAO,MAAMC,UAAU,GAAG;EACxBC,YAAY,EAAGC,OAAgB,IAC7BH,IAAI,CAACI,IAAI,CAAE,GAAEL,IAAK,eAAc,EAAE;IAAEM,WAAW,EAAEF;EAAQ,CAAC,CAAC;EAC7DG,gBAAgB,EAAE,CAChBC,QAAgB,EAChBC,UAAmB,EACnBC,IAAY,EACZC,QAAgB,KAKhBV,IAAI,CAACW,GAAG,CACL,GAAEZ,IAAK,8BAA6BQ,QAAS,eAAcC,UAAW,SAAQC,IAAK,aAAYC,QAAS,EAAC,CAC3G;EACHE,kBAAkB,EAAE,CAClBC,IAAY,EACZN,QAAgB,EAChBC,UAAmB,KAEnBR,IAAI,CAACW,GAAG,CACL,GAAEZ,IAAK,4BAA2Bc,IAAK,aAAYN,QAAS,eAAcC,UAAW,EAAC,CACxF;EACHM,aAAa,EAAGX,OAAgB,IAC9BH,IAAI,CAACe,GAAG,CAAE,GAAEhB,IAAK,eAAc,EAAE;IAAEM,WAAW,EAAEF;EAAQ,CAAC,CAAC;EAC5Da,aAAa,EAAGC,SAAiB,IAC/BjB,IAAI,CAACkB,MAAM,CAAE,GAAEnB,IAAK,2BAA0BkB,SAAU,EAAC;AAC7D,CAAC"},"metadata":{},"sourceType":"module"}