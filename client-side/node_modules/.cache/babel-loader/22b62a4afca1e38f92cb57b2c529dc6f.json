{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { call, put, select, takeLatest } from \"redux-saga/effects\";\nimport { actions as channelsAction } from \".\";\nimport { PAGE_SIZE } from \"../../../../common/const\";\nimport { ChannelAPI } from \"../../../../service/channelAPI\";\nimport { MessageAPI } from \"../../../../service/messageAPI\";\nexport function* getChannelsAsync(action) {\n  try {\n    console.log(action.payload);\n    const updatedChannels = yield call(() => ChannelAPI.getChannelByPage(action.payload.sortType, action.payload.sortAscend, action.payload.page, PAGE_SIZE));\n    if (updatedChannels.data) {\n      const {\n        channels,\n        count\n      } = updatedChannels.data;\n      yield put(channelsAction.updateChannels({\n        channels: channels,\n        totalChannels: count\n      }));\n    }\n  } catch (err) {\n    console.log(err);\n  } finally {\n    // yield put(statusActions.loading(false));\n  }\n}\nexport function* addChannelAsync(action) {\n  try {\n    yield call(() => ChannelAPI.createClient(action.payload));\n    const state = yield select();\n    if (state.channels) {\n      yield put(channelsAction.getChannels(state.channels.filterPara));\n    }\n  } catch (err) {\n    console.log(err);\n  } finally {\n    // yield put(statusActions.loading(false));\n  }\n}\nexport function* addMessageAsync(action) {\n  try {\n    yield call(() => MessageAPI.createMessage(action.payload.message));\n  } catch (err) {\n    console.log(err);\n  } finally {\n    // yield put(statusActions.loading(false));\n  }\n}\nexport function* deleteMessageAsync(action) {\n  try {\n    yield call(() => MessageAPI.deleteMessage(action.payload.messageId));\n  } catch (err) {\n    console.log(err);\n  } finally {\n    // yield put(statusActions.loading(false));\n  }\n}\nexport function* channelsSaga() {\n  yield takeLatest(channelsAction.getChannels.type, getChannelsAsync);\n  yield takeLatest(channelsAction.addChannel.type, addChannelAsync);\n  yield takeLatest(channelsAction.addMessage.type, addMessageAsync);\n  yield takeLatest(channelsAction.deleteMessage.type, deleteMessageAsync);\n}","map":{"version":3,"names":["call","put","select","takeLatest","actions","channelsAction","PAGE_SIZE","ChannelAPI","MessageAPI","getChannelsAsync","action","console","log","payload","updatedChannels","getChannelByPage","sortType","sortAscend","page","data","channels","count","updateChannels","totalChannels","err","addChannelAsync","createClient","state","getChannels","filterPara","addMessageAsync","createMessage","message","deleteMessageAsync","deleteMessage","messageId","channelsSaga","type","addChannel","addMessage"],"sources":["D:/Github/multi-channel-project/multi-channel-frontend/src/pages/HomePage/slice/channelsSlice/saga.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { call, put, select, takeLatest } from \"redux-saga/effects\";\r\nimport { PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { actions as channelsAction } from \".\";\r\nimport { Channel, ChannelsFilterPara } from \"../../../../types/channelType\";\r\nimport { GrubResponse } from \"../../../../types/GrupResponse\";\r\nimport { PAGE_SIZE } from \"../../../../common/const\";\r\nimport { ChannelAPI } from \"../../../../service/channelAPI\";\r\nimport { RootState } from \"../../../../types/RootState\";\r\nimport { MessageAPI } from \"../../../../service/messageAPI\";\r\nimport { Message } from \"../../../../types/messageType\";\r\n\r\nexport function* getChannelsAsync(action: PayloadAction<ChannelsFilterPara>) {\r\n  try {\r\n    console.log(action.payload);\r\n    const updatedChannels: GrubResponse<{\r\n      channels: Channel[];\r\n      count: number;\r\n    } | null> = yield call(() =>\r\n      ChannelAPI.getChannelByPage(\r\n        action.payload.sortType,\r\n        action.payload.sortAscend,\r\n        action.payload.page,\r\n        PAGE_SIZE\r\n      )\r\n    );\r\n    if (updatedChannels.data) {\r\n      const { channels, count } = updatedChannels.data;\r\n      yield put(\r\n        channelsAction.updateChannels({\r\n          channels: channels,\r\n          totalChannels: count,\r\n        })\r\n      );\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* addChannelAsync(action: PayloadAction<Channel>) {\r\n  try {\r\n    yield call(() => ChannelAPI.createClient(action.payload));\r\n    const state: RootState = yield select();\r\n    if (state.channels) {\r\n      yield put(channelsAction.getChannels(state.channels.filterPara));\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* addMessageAsync(\r\n  action: PayloadAction<{\r\n    channelId: string;\r\n    message: Message;\r\n  }>\r\n) {\r\n  try {\r\n    yield call(() => MessageAPI.createMessage(action.payload.message));\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* deleteMessageAsync(\r\n  action: PayloadAction<{\r\n    channelId: string;\r\n    messageId: string;\r\n  }>\r\n) {\r\n  try {\r\n    yield call(() => MessageAPI.deleteMessage(action.payload.messageId));\r\n  } catch (err) {\r\n    console.log(err);\r\n  } finally {\r\n    // yield put(statusActions.loading(false));\r\n  }\r\n}\r\n\r\nexport function* channelsSaga() {\r\n  yield takeLatest(channelsAction.getChannels.type, getChannelsAsync);\r\n  yield takeLatest(channelsAction.addChannel.type, addChannelAsync);\r\n  yield takeLatest(channelsAction.addMessage.type, addMessageAsync);\r\n  yield takeLatest(channelsAction.deleteMessage.type, deleteMessageAsync);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,UAAU,QAAQ,oBAAoB;AAElE,SAASC,OAAO,IAAIC,cAAc,QAAQ,GAAG;AAG7C,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,UAAU,QAAQ,gCAAgC;AAE3D,SAASC,UAAU,QAAQ,gCAAgC;AAG3D,OAAO,UAAUC,gBAAgB,CAACC,MAAyC,EAAE;EAC3E,IAAI;IACFC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,OAAO,CAAC;IAC3B,MAAMC,eAGG,GAAG,MAAMd,IAAI,CAAC,MACrBO,UAAU,CAACQ,gBAAgB,CACzBL,MAAM,CAACG,OAAO,CAACG,QAAQ,EACvBN,MAAM,CAACG,OAAO,CAACI,UAAU,EACzBP,MAAM,CAACG,OAAO,CAACK,IAAI,EACnBZ,SAAS,CACV,CACF;IACD,IAAIQ,eAAe,CAACK,IAAI,EAAE;MACxB,MAAM;QAAEC,QAAQ;QAAEC;MAAM,CAAC,GAAGP,eAAe,CAACK,IAAI;MAChD,MAAMlB,GAAG,CACPI,cAAc,CAACiB,cAAc,CAAC;QAC5BF,QAAQ,EAAEA,QAAQ;QAClBG,aAAa,EAAEF;MACjB,CAAC,CAAC,CACH;IACH;EACF,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,GAAG,CAAC;EAClB,CAAC,SAAS;IACR;EAAA;AAEJ;AAEA,OAAO,UAAUC,eAAe,CAACf,MAA8B,EAAE;EAC/D,IAAI;IACF,MAAMV,IAAI,CAAC,MAAMO,UAAU,CAACmB,YAAY,CAAChB,MAAM,CAACG,OAAO,CAAC,CAAC;IACzD,MAAMc,KAAgB,GAAG,MAAMzB,MAAM,EAAE;IACvC,IAAIyB,KAAK,CAACP,QAAQ,EAAE;MAClB,MAAMnB,GAAG,CAACI,cAAc,CAACuB,WAAW,CAACD,KAAK,CAACP,QAAQ,CAACS,UAAU,CAAC,CAAC;IAClE;EACF,CAAC,CAAC,OAAOL,GAAG,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,GAAG,CAAC;EAClB,CAAC,SAAS;IACR;EAAA;AAEJ;AAEA,OAAO,UAAUM,eAAe,CAC9BpB,MAGE,EACF;EACA,IAAI;IACF,MAAMV,IAAI,CAAC,MAAMQ,UAAU,CAACuB,aAAa,CAACrB,MAAM,CAACG,OAAO,CAACmB,OAAO,CAAC,CAAC;EACpE,CAAC,CAAC,OAAOR,GAAG,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,GAAG,CAAC;EAClB,CAAC,SAAS;IACR;EAAA;AAEJ;AAEA,OAAO,UAAUS,kBAAkB,CACjCvB,MAGE,EACF;EACA,IAAI;IACF,MAAMV,IAAI,CAAC,MAAMQ,UAAU,CAAC0B,aAAa,CAACxB,MAAM,CAACG,OAAO,CAACsB,SAAS,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOX,GAAG,EAAE;IACZb,OAAO,CAACC,GAAG,CAACY,GAAG,CAAC;EAClB,CAAC,SAAS;IACR;EAAA;AAEJ;AAEA,OAAO,UAAUY,YAAY,GAAG;EAC9B,MAAMjC,UAAU,CAACE,cAAc,CAACuB,WAAW,CAACS,IAAI,EAAE5B,gBAAgB,CAAC;EACnE,MAAMN,UAAU,CAACE,cAAc,CAACiC,UAAU,CAACD,IAAI,EAAEZ,eAAe,CAAC;EACjE,MAAMtB,UAAU,CAACE,cAAc,CAACkC,UAAU,CAACF,IAAI,EAAEP,eAAe,CAAC;EACjE,MAAM3B,UAAU,CAACE,cAAc,CAAC6B,aAAa,CAACG,IAAI,EAAEJ,kBAAkB,CAAC;AACzE"},"metadata":{},"sourceType":"module"}