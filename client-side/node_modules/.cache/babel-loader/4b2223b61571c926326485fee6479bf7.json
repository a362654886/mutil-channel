{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { useInjectReducer, useInjectSaga } from \"redux-injectors\";\nimport { cloneDeep } from \"lodash\";\nimport { channelsSaga } from \"./saga\";\nexport const initialState = {\n  channels: [{\n    _id: \"\",\n    name: \"\",\n    messages: []\n  }],\n  totalChannels: 0,\n  filterPara: {\n    sortType: \"name\",\n    sortAscend: true,\n    page: 1\n  }\n};\nconst slice = createSlice({\n  name: \"channels\",\n  initialState,\n  reducers: {\n    /*\r\n    channel method\r\n    */\n    updateChannels(state, action) {\n      const newState = cloneDeep(state);\n      newState.channels = action.payload.channels;\n      newState.totalChannels = action.payload.totalChannels;\n      return newState;\n    },\n    getChannels(state, action) {\n      const newState = cloneDeep(state);\n      newState.filterPara = action.payload;\n      return newState;\n    },\n    addChannel(state, action) {\n      const newState = cloneDeep(state);\n      //newState.channels.push(action.payload);\n      return newState;\n    },\n    deleteChannel(state, action) {\n      const newState = cloneDeep(state);\n      const index = newState.channels.findIndex(channel => channel._id === action.payload);\n      newState.channels.splice(index, 1);\n      return newState;\n    },\n    /*\r\n     message method \r\n    */\n    addMessage(state, action) {\n      // get channel id\n      const newState = cloneDeep(state);\n      const channelIndex = newState.channels.findIndex(channel => channel._id === action.payload.channelId);\n      // push message to channel's messages\n      if (newState.channels[channelIndex] && newState.channels[channelIndex].messages) {\n        newState.channels[channelIndex].messages.push(action.payload.message);\n      }\n      return newState;\n    },\n    // add message\n    deleteMessage(state, action) {\n      // get channel id\n      const newState = cloneDeep(state);\n      const channelIndex = newState.channels.findIndex(channel => channel._id === action.payload.channelId);\n      // delete channel's message\n      if (newState.channels[channelIndex] && newState.channels[channelIndex].messages) {\n        const messages = newState.channels[channelIndex].messages;\n        const messageIndex = messages.findIndex(message => message._id === action.payload.messageId);\n        newState.channels[channelIndex].messages.splice(messageIndex, 1);\n      }\n      return newState;\n    }\n  }\n});\nexport const {\n  actions,\n  reducer,\n  name: channelsSlice\n} = slice;\nexport const useChannelsSlice = () => {\n  _s();\n  useInjectReducer({\n    key: slice.name,\n    reducer: slice.reducer\n  });\n  useInjectSaga({\n    key: slice.name,\n    saga: channelsSaga\n  });\n  return {\n    actions: slice.actions\n  };\n};\n_s(useChannelsSlice, \"ykJhATORHQGnaADRAJfvIx+/J2s=\", false, function () {\n  return [useInjectReducer, useInjectSaga];\n});","map":{"version":3,"names":["createSlice","useInjectReducer","useInjectSaga","cloneDeep","channelsSaga","initialState","channels","_id","name","messages","totalChannels","filterPara","sortType","sortAscend","page","slice","reducers","updateChannels","state","action","newState","payload","getChannels","addChannel","deleteChannel","index","findIndex","channel","splice","addMessage","channelIndex","channelId","push","message","deleteMessage","messageIndex","messageId","actions","reducer","channelsSlice","useChannelsSlice","key","saga"],"sources":["D:/Github/multi-channel-project/multi-channel-frontend/src/pages/HomePage/slice/channelsSlice/index.ts"],"sourcesContent":["import {\r\n  CaseReducerActions,\r\n  createSlice,\r\n  PayloadAction,\r\n} from \"@reduxjs/toolkit\";\r\nimport { useInjectReducer, useInjectSaga } from \"redux-injectors\";\r\nimport {\r\n  Channel,\r\n  ChannelsFilterPara,\r\n  ChannelsState,\r\n} from \"../../../../types/channelType\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { channelsSaga } from \"./saga\";\r\nimport { Message } from \"../../../../types/messageType\";\r\n\r\nexport const initialState: ChannelsState = {\r\n  channels: [{ _id: \"\", name: \"\", messages: [] }],\r\n  totalChannels: 0,\r\n  filterPara: { sortType: \"name\", sortAscend: true, page: 1 },\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: \"channels\",\r\n  initialState,\r\n  reducers: {\r\n    /*\r\n    channel method\r\n    */\r\n    updateChannels(\r\n      state,\r\n      action: PayloadAction<{\r\n        channels: Channel[];\r\n        totalChannels: number;\r\n      }>\r\n    ) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      newState.channels = action.payload.channels;\r\n      newState.totalChannels = action.payload.totalChannels;\r\n      return newState;\r\n    },\r\n    getChannels(state, action: PayloadAction<ChannelsFilterPara>) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      newState.filterPara = action.payload;\r\n      return newState;\r\n    },\r\n    addChannel(state, action: PayloadAction<Channel>) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      //newState.channels.push(action.payload);\r\n      return newState;\r\n    },\r\n    deleteChannel(state, action: PayloadAction<string>) {\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      const index = newState.channels.findIndex(\r\n        (channel) => channel._id === action.payload\r\n      );\r\n      newState.channels.splice(index, 1);\r\n      return newState;\r\n    },\r\n    /*\r\n     message method \r\n    */\r\n    addMessage(\r\n      state,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        message: Message;\r\n      }>\r\n    ) {\r\n      // get channel id\r\n      const newState: ChannelsState = cloneDeep(state);\r\n      const channelIndex = newState.channels.findIndex(\r\n        (channel) => channel._id === action.payload.channelId\r\n      );\r\n      // push message to channel's messages\r\n      if (\r\n        newState.channels[channelIndex] &&\r\n        newState.channels[channelIndex].messages\r\n      ) {\r\n        (newState.channels[channelIndex].messages as Message[]).push(\r\n          action.payload.message\r\n        );\r\n      }\r\n      return newState;\r\n    },\r\n    // add message\r\n    deleteMessage(\r\n      state,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        messageId: string;\r\n      }>\r\n    ) {\r\n      // get channel id\r\n      const newState = cloneDeep(state);\r\n      const channelIndex = newState.channels.findIndex(\r\n        (channel: Channel) => channel._id === action.payload.channelId\r\n      );\r\n      // delete channel's message\r\n      if (\r\n        newState.channels[channelIndex] &&\r\n        newState.channels[channelIndex].messages\r\n      ) {\r\n        const messages = newState.channels[channelIndex].messages as Message[];\r\n        const messageIndex = messages.findIndex(\r\n          (message) => (message._id as string) === action.payload.messageId\r\n        );\r\n        (newState.channels[channelIndex].messages as Message[]).splice(\r\n          messageIndex,\r\n          1\r\n        );\r\n      }\r\n      return newState;\r\n    },\r\n  },\r\n});\r\nexport const { actions, reducer, name: channelsSlice } = slice;\r\n\r\nexport const useChannelsSlice = (): {\r\n  actions: CaseReducerActions<{\r\n    updateChannels(\r\n      state: ChannelsState,\r\n      action: PayloadAction<{\r\n        channels: Channel[];\r\n        totalChannels: number;\r\n      }>\r\n    ): void;\r\n    getChannels(\r\n      state: ChannelsState,\r\n      action: PayloadAction<ChannelsFilterPara>\r\n    ): void;\r\n    addChannel(state: ChannelsState, action: PayloadAction<Channel>): void;\r\n    deleteChannel(state: ChannelsState, action: PayloadAction<string>): void;\r\n    addMessage(\r\n      state: ChannelsState,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        message: Message;\r\n      }>\r\n    ): void;\r\n    deleteMessage(\r\n      state: ChannelsState,\r\n      action: PayloadAction<{\r\n        channelId: string;\r\n        messageId: string;\r\n      }>\r\n    ): void;\r\n  }>;\r\n} => {\r\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\r\n  useInjectSaga({ key: slice.name, saga: channelsSaga });\r\n  return { actions: slice.actions };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}