{"ast":null,"code":"import { HOST } from \"../common/const\";\nimport http from \"../tools/http\";\nexport const MessageAPI = {\n  createMessage: message => http.post(`${HOST}messageInsert`, {\n    messageBody: message\n  }),\n  getMessageByPage: (sortType, sortAscend, channelId, page, pageSize) => http.get(`${HOST}messagesGetByPage?sortType=${sortType}&sortAscend=${sortAscend}&channelId=${channelId}&page=${page}&pageSize=${pageSize}`),\n  getChannelBySearch: (title, timeStart, timeEnd, sortType, sortAscend) => http.get(`${HOST}messagesGetBySearch?title=${title}&timeStart=${timeStart}&timeEnd=${timeEnd}&sortType=${sortType}&sortAscend=${sortAscend}`),\n  updateMessage: message => http.put(`${HOST}messageUpdate`, {\n    messageBody: message\n  }),\n  deleteMessage: messageId => http.delete(`${HOST}messageDelete?messageId=${messageId}`)\n};","map":{"version":3,"names":["HOST","http","MessageAPI","createMessage","message","post","messageBody","getMessageByPage","sortType","sortAscend","channelId","page","pageSize","get","getChannelBySearch","title","timeStart","timeEnd","updateMessage","put","deleteMessage","messageId","delete"],"sources":["D:/Github/multi-channel-project/multi-channel-frontend/src/service/messageAPI.ts"],"sourcesContent":["import { HOST } from \"../common/const\";\r\nimport http from \"../tools/http\";\r\nimport { Channel } from \"../types/channelType\";\r\nimport { GrubResponsePromise } from \"../types/GrupResponse\";\r\nimport { Message } from \"../types/messageType\";\r\n\r\nexport const MessageAPI = {\r\n  createMessage: (message: Message): GrubResponsePromise<number | null> =>\r\n    http.post(`${HOST}messageInsert`, { messageBody: message }),\r\n  getMessageByPage: (\r\n    sortType: string,\r\n    sortAscend: boolean,\r\n    channelId: string,\r\n    page: number,\r\n    pageSize: number\r\n  ): GrubResponsePromise<{\r\n    messages: Message[];\r\n    count: number;\r\n  } | null> =>\r\n    http.get(\r\n      `${HOST}messagesGetByPage?sortType=${sortType}&sortAscend=${sortAscend}&channelId=${channelId}&page=${page}&pageSize=${pageSize}`\r\n    ),\r\n  getChannelBySearch: (\r\n    title: string,\r\n    timeStart: number,\r\n    timeEnd: number,\r\n    sortType: string,\r\n    sortAscend: boolean\r\n  ): GrubResponsePromise<Channel[]> =>\r\n    http.get(\r\n      `${HOST}messagesGetBySearch?title=${title}&timeStart=${timeStart}&timeEnd=${timeEnd}&sortType=${sortType}&sortAscend=${sortAscend}`\r\n    ),\r\n  updateMessage: (message: Message): GrubResponsePromise<number | null> =>\r\n    http.put(`${HOST}messageUpdate`, { messageBody: message }),\r\n  deleteMessage: (messageId: string): GrubResponsePromise<number | null> =>\r\n    http.delete(`${HOST}messageDelete?messageId=${messageId}`),\r\n};\r\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,IAAI,MAAM,eAAe;AAKhC,OAAO,MAAMC,UAAU,GAAG;EACxBC,aAAa,EAAGC,OAAgB,IAC9BH,IAAI,CAACI,IAAI,CAAE,GAAEL,IAAK,eAAc,EAAE;IAAEM,WAAW,EAAEF;EAAQ,CAAC,CAAC;EAC7DG,gBAAgB,EAAE,CAChBC,QAAgB,EAChBC,UAAmB,EACnBC,SAAiB,EACjBC,IAAY,EACZC,QAAgB,KAKhBX,IAAI,CAACY,GAAG,CACL,GAAEb,IAAK,8BAA6BQ,QAAS,eAAcC,UAAW,cAAaC,SAAU,SAAQC,IAAK,aAAYC,QAAS,EAAC,CAClI;EACHE,kBAAkB,EAAE,CAClBC,KAAa,EACbC,SAAiB,EACjBC,OAAe,EACfT,QAAgB,EAChBC,UAAmB,KAEnBR,IAAI,CAACY,GAAG,CACL,GAAEb,IAAK,6BAA4Be,KAAM,cAAaC,SAAU,YAAWC,OAAQ,aAAYT,QAAS,eAAcC,UAAW,EAAC,CACpI;EACHS,aAAa,EAAGd,OAAgB,IAC9BH,IAAI,CAACkB,GAAG,CAAE,GAAEnB,IAAK,eAAc,EAAE;IAAEM,WAAW,EAAEF;EAAQ,CAAC,CAAC;EAC5DgB,aAAa,EAAGC,SAAiB,IAC/BpB,IAAI,CAACqB,MAAM,CAAE,GAAEtB,IAAK,2BAA0BqB,SAAU,EAAC;AAC7D,CAAC"},"metadata":{},"sourceType":"module"}